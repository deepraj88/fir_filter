-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=609,HLS_SYN_LUT=374,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110100";
    constant ap_const_lv32_139 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111001";
    constant ap_const_lv32_FFFFFFA5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110100101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4_load_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_fu_59_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_fu_75_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_2_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_5_fu_59_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_fu_75_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_117_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_fu_159_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                shift_reg_0 <= x;
                shift_reg_1 <= shift_reg_0;
                shift_reg_2 <= shift_reg_1;
                shift_reg_3 <= shift_reg_2;
                shift_reg_4 <= shift_reg_3;
                shift_reg_4_load_reg_225 <= shift_reg_4;
                    tmp_4_5_reg_230(31 downto 2) <= tmp_4_5_fu_59_p2(31 downto 2);
                tmp_4_6_reg_235 <= tmp_4_6_fu_75_p2;
                tmp_4_8_reg_240 <= tmp_4_8_fu_101_p2;
                tmp_6_reg_245 <= tmp_6_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_reg_5 <= shift_reg_4_load_reg_225;
                shift_reg_6 <= shift_reg_5;
                shift_reg_7 <= shift_reg_6;
                shift_reg_8 <= shift_reg_7;
                shift_reg_9 <= shift_reg_8;
                tmp2_reg_265 <= tmp2_fu_204_p2;
                tmp_4_2_reg_255 <= tmp_4_2_fu_159_p2;
                tmp_4_4_reg_260 <= tmp_4_4_fu_185_p2;
                tmp_4_reg_250 <= tmp_4_fu_133_p2;
            end if;
        end if;
    end process;
    tmp_4_5_reg_230(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_210_p2 <= std_logic_vector(unsigned(tmp_4_2_reg_255) + unsigned(tmp_4_4_reg_260));
    tmp2_fu_204_p2 <= std_logic_vector(unsigned(tmp4_fu_200_p2) + unsigned(tmp3_fu_196_p2));
    tmp3_fu_196_p2 <= std_logic_vector(unsigned(tmp_4_5_reg_230) + unsigned(tmp_4_6_reg_235));
    tmp4_fu_200_p2 <= std_logic_vector(unsigned(tmp_4_8_reg_240) + unsigned(tmp_6_reg_245));
    tmp_4_2_fu_159_p0 <= shift_reg_7;
    tmp_4_2_fu_159_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_2_fu_159_p0) * signed(ap_const_lv32_FFFFFFA5))), 32));
    tmp_4_4_fu_185_p0 <= shift_reg_5;
    tmp_4_4_fu_185_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_4_fu_185_p0) * signed('0' &ap_const_lv32_139))), 32));
    tmp_4_5_fu_59_p0 <= shift_reg_4;
    tmp_4_5_fu_59_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_5_fu_59_p0) * signed('0' &ap_const_lv32_1F4))), 32));
    tmp_4_6_fu_75_p0 <= shift_reg_3;
    tmp_4_6_fu_75_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_6_fu_75_p0) * signed('0' &ap_const_lv32_139))), 32));
    tmp_4_8_fu_101_p0 <= shift_reg_1;
    tmp_4_8_fu_101_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_8_fu_101_p0) * signed(ap_const_lv32_FFFFFFA5))), 32));
    tmp_4_fu_133_p0 <= shift_reg_9;
    tmp_4_fu_133_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_fu_133_p0) * signed('0' &ap_const_lv32_35))), 32));
    tmp_6_fu_117_p0 <= x;
    tmp_6_fu_117_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_6_fu_117_p0) * signed('0' &ap_const_lv32_35))), 32));
    tmp_fu_214_p2 <= std_logic_vector(unsigned(tmp1_fu_210_p2) + unsigned(tmp_4_reg_250));
    y <= std_logic_vector(unsigned(tmp2_reg_265) + unsigned(tmp_fu_214_p2));

    y_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
