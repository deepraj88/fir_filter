// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=609,HLS_SYN_LUT=374,HLS_VERSION=2018_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] shift_reg_9;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_7;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_0;
reg  signed [31:0] shift_reg_4_load_reg_225;
wire   [31:0] tmp_4_5_fu_59_p2;
reg   [31:0] tmp_4_5_reg_230;
wire   [31:0] tmp_4_6_fu_75_p2;
reg   [31:0] tmp_4_6_reg_235;
wire   [31:0] tmp_4_8_fu_101_p2;
reg   [31:0] tmp_4_8_reg_240;
wire   [31:0] tmp_6_fu_117_p2;
reg   [31:0] tmp_6_reg_245;
wire   [31:0] tmp_4_fu_133_p2;
reg   [31:0] tmp_4_reg_250;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_4_2_fu_159_p2;
reg   [31:0] tmp_4_2_reg_255;
wire   [31:0] tmp_4_4_fu_185_p2;
reg   [31:0] tmp_4_4_reg_260;
wire   [31:0] tmp2_fu_204_p2;
reg   [31:0] tmp2_reg_265;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_4_5_fu_59_p0;
wire  signed [31:0] tmp_4_6_fu_75_p0;
wire  signed [31:0] tmp_4_8_fu_101_p0;
wire  signed [31:0] tmp_6_fu_117_p0;
wire  signed [31:0] tmp_4_fu_133_p0;
wire  signed [31:0] tmp_4_2_fu_159_p0;
wire  signed [31:0] tmp_4_4_fu_185_p0;
wire   [31:0] tmp4_fu_200_p2;
wire   [31:0] tmp3_fu_196_p2;
wire   [31:0] tmp1_fu_210_p2;
wire   [31:0] tmp_fu_214_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_0 <= x;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
        shift_reg_3 <= shift_reg_2;
        shift_reg_4 <= shift_reg_3;
        shift_reg_4_load_reg_225 <= shift_reg_4;
        tmp_4_5_reg_230[31 : 2] <= tmp_4_5_fu_59_p2[31 : 2];
        tmp_4_6_reg_235 <= tmp_4_6_fu_75_p2;
        tmp_4_8_reg_240 <= tmp_4_8_fu_101_p2;
        tmp_6_reg_245 <= tmp_6_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_5 <= shift_reg_4_load_reg_225;
        shift_reg_6 <= shift_reg_5;
        shift_reg_7 <= shift_reg_6;
        shift_reg_8 <= shift_reg_7;
        shift_reg_9 <= shift_reg_8;
        tmp2_reg_265 <= tmp2_fu_204_p2;
        tmp_4_2_reg_255 <= tmp_4_2_fu_159_p2;
        tmp_4_4_reg_260 <= tmp_4_4_fu_185_p2;
        tmp_4_reg_250 <= tmp_4_fu_133_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign tmp1_fu_210_p2 = (tmp_4_2_reg_255 + tmp_4_4_reg_260);

assign tmp2_fu_204_p2 = (tmp4_fu_200_p2 + tmp3_fu_196_p2);

assign tmp3_fu_196_p2 = (tmp_4_5_reg_230 + tmp_4_6_reg_235);

assign tmp4_fu_200_p2 = (tmp_4_8_reg_240 + tmp_6_reg_245);

assign tmp_4_2_fu_159_p0 = shift_reg_7;

assign tmp_4_2_fu_159_p2 = ($signed(tmp_4_2_fu_159_p0) * $signed(-'h5B));

assign tmp_4_4_fu_185_p0 = shift_reg_5;

assign tmp_4_4_fu_185_p2 = ($signed(tmp_4_4_fu_185_p0) * $signed('h139));

assign tmp_4_5_fu_59_p0 = shift_reg_4;

assign tmp_4_5_fu_59_p2 = ($signed(tmp_4_5_fu_59_p0) * $signed('h1F4));

assign tmp_4_6_fu_75_p0 = shift_reg_3;

assign tmp_4_6_fu_75_p2 = ($signed(tmp_4_6_fu_75_p0) * $signed('h139));

assign tmp_4_8_fu_101_p0 = shift_reg_1;

assign tmp_4_8_fu_101_p2 = ($signed(tmp_4_8_fu_101_p0) * $signed(-'h5B));

assign tmp_4_fu_133_p0 = shift_reg_9;

assign tmp_4_fu_133_p2 = ($signed(tmp_4_fu_133_p0) * $signed('h35));

assign tmp_6_fu_117_p0 = x;

assign tmp_6_fu_117_p2 = ($signed(tmp_6_fu_117_p0) * $signed('h35));

assign tmp_fu_214_p2 = (tmp1_fu_210_p2 + tmp_4_reg_250);

assign y = (tmp2_reg_265 + tmp_fu_214_p2);

always @ (posedge ap_clk) begin
    tmp_4_5_reg_230[1:0] <= 2'b00;
end

endmodule //fir
